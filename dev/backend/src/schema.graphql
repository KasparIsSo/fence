# import * from './generated/prisma.graphql'

type Mutation {
  signup(email: String!, password: String!, name: String!): User!
  signin(email: String!, password: String!): User!
  createInfluencer(
    firstName: String!
    lastName: String
    description: String
    phone: String
    thumbnail: String
    image: String
    activeCampaigns: [String]
    pastCampaigns: [String]
  ): Influencer!
  updateInfluencer(
    id: ID!
    firstName: String!
    lastName: String
    description: String
    phone: String
    thumbnail: String
    image: String
    activeCampaigns: [String]
    pastCampaigns: [String]
  ): Influencer!
  createAddress(
    unit: String
    streetNumber: String
    street: String
    city: String
    country: String
    postalCode: String
    influencerId: String!
  ): Address!
  createSocial(
    twitter: String
    instagram: String
    facebook: String
    website: String
    influencerId: String!
  ): Social!
  createSize(
    shirt: clothingSize
    pant: Int
    shoe: Int
    influencerId: String!
  ): Size!
  createLoggedActivity(
    eventType: activityType!
    description: String!
    influencerId: String!
  ): LoggedActivity!
  createNote(content: String!, influencerId: String!, isShown: Boolean!): Note!
}

type Query {
  items: [Item]!
  influencers: [Influencer]!
  influencer(where: InfluencerWhereUniqueInput!): Influencer
  addresses(where: AddressWhereInput): [Address]!
  socials(where: SocialWhereInput): [Social]!
  sizes(where: SizeWhereInput): [Size]!
  loggedActivities(
    where: LoggedActivityWhereInput
    orderBy: LoggedActivityOrderByInput
  ): [LoggedActivity]!
  loggedActivitiesConnection(
    after: String
    first: Int
    where: LoggedActivityWhereInput
    orderBy: LoggedActivityOrderByInput
  ): LoggedActivityConnection!
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput): [Note]!
  notesConnection(
    after: String
    first: Int
    where: NoteWhereInput
    orderBy: NoteOrderByInput
  ): NoteConnection!
  loggedInUser: User
}
